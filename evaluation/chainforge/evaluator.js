// Code for evaluator node in ChainForge
// This code is used to compare the LLM's response with the provided solution
// In this case: Provided solution is the command and the response is the LLM output
// which will be parsed using getResponseCmd, which attempts to extract the command from the response
// It checks if the command is in between the ``` or ` ` and then compares the command with the solution
// If not, it just returns the response as is (trimmed/stripped)
function getResponseCmd(response) {
  let pattern = /```(?:[a-zA-Z]+)?\n([\s\S]*?)\n```/;
  let matches = response.match(pattern);
  let responseCmd;

  if (matches && matches.length > 0) {
    responseCmd = matches[1];
  } else {
    responseCmd = response;
  }

  pattern = /`([^`]+)`/;
  matches = response.match(pattern);
  if (matches && matches.length > 0) {
    responseCmd = matches[1];
  }

  if (responseCmd.includes("`")) {
    responseCmd = responseCmd.replace(/`/g, "");
  }

  return responseCmd.trim();
}

function checkCommandOptionsMatch(command, response, extraArgsAllowed = false) {
  let responseCmd = getResponseCmd(response);

  // Split the command and response into components
  let commandParts = command.split(/\s+/);
  let responseParts = responseCmd.split(/\s+/);

  // Exclude the executable for direct comparison
  let commandArgs = new Set(commandParts.slice(1));
  let responseArgs = new Set(responseParts.slice(1));

  // Ensure the command executable is present in the response
  if (commandParts[0] !== responseParts[0]) {
    return false;
  }

  // Check if all command arguments/options are present in the response
  let isSubset = [...commandArgs].every((arg) => responseArgs.has(arg));

  if (extraArgsAllowed) {
    return isSubset;
  } else {
    // Ensure no extra arguments/options are present in the response when not allowed
    return isSubset && commandArgs.size === responseArgs.size;
  }
}

function evaluate(response) {
  let cmd = getResponseCmd(response.text);
  let check = checkCommandOptionsMatch(response.meta["solution"], cmd);
  return check;
}
