# Code for Python evaluator node in ChainForge
# This code is used to compare the LLM's response with the provided solution
# In this case: Provided solution is the command and the response is the LLM output
# which will be parsed using getResponseCmd, which attempts to extract the command from the response
# It checks if the command is in between the ``` or ` ` and then compares the command with the solution
# If not, it just returns the response as is, which will be then stripped
import re
def get_response_cmd(response):
    pattern = r"```(?:[a-zA-Z]+)?\n([\s\S]*?)\n```"
    matches = re.findall(pattern, response)
    if matches and len(matches) > 0:
        responsecmd = matches[0]
    else:
        responsecmd = response
    pattern = r"`([^`]+)`"
    matches = re.findall(pattern, response)
    if matches and len(matches) > 0:
        responsecmd = matches[0]
    else:
        responsecmd = response
    if "`" in responsecmd:
        responsecmd = responsecmd.replace("`", "")
    # if len(responsecmd) < 2:
    #     print("e")
    #     print(responsecmd)
    return responsecmd

def check_command_options_match(command, response, extra_args_allowed=False):
    responsecmd = str(get_response_cmd(response)).strip()
        
    # Split the command and response into components
    command_parts = command.split()
    response_parts = responsecmd.split()
    
    # Create sets for the command and response arguments/options, excluding the executable
    command_args = set(command_parts[1:])
    response_args = set(response_parts[1:])  # Exclude executable for direct comparison
    
    # print(f"Comparing:\n{command}\n{responsecmd}\n")
    try:
        # Ensure the command executable is present in the response
        if command_parts[0] != response_parts[0]:
            return False
        
        # Check if all command arguments/options are present in the response
        is_subset = command_args.issubset(response_args)
        
        if extra_args_allowed:
            return is_subset
        else:
            # Ensure no extra arguments/options are present in the response when not allowed
            return is_subset and command_args == response_args
    except Exception as e:
        print(f"Error with {response}")
        return False
        
def evaluate(response):
    cmd = get_response_cmd(response.text)
  
    check = check_command_options_match(response.meta['solution'], cmd)
    return check

